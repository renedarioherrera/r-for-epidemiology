{
  "hash": "790352a8f7574eef0a452f268cb95cc6",
  "result": {
    "markdown": "# R\n\n## Learning Objectives\n\nIn this chapter, readers will:\n\n-   identify the types of vectors and objects used in R\n-   be able to assign a value to a named object\n-   list the commands used to install and load packages\n\n## Introduction\n\nIn this section, we will review R. R is a powerful data science statistical programming language. The [R user manual](https://cloud.r-project.org/doc/manuals/r-release/R-intro.html) is a useful reference.\n\n## R is a Calculator\n\nR can be used as an advanced scientific calculator. For example, say I wanted to sum two values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\nOr if I wanted to take the average of a set of values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(2,4,6,8))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n\nNotice that I enclosed the values in `c()`. I used `c()` to create a vector of my numeric values, and then I took a mean of those values. I could instead assign (`<-`) the vector to a named object:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_vector <- c(2,4,6,8)\nmy_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6 8\n```\n:::\n\n```{.r .cell-code}\nmean(my_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\n\nNow each time I use `my_vector`, R will know I mean `2,4,6,8`.\n\n### Vectors\n\nThere are different types of vectors.\n\n-   numeric: numbers, like the example above\n-   character: Character strings are entered using either matching double (\") or single (') quotes, but are printed using double quotes (or sometimes without quotes).\n-   logical: The elements of a logical vector can have the values TRUE, FALSE, and NA (for \"not available\").\n\n#### Other Types of Objects\n\nAnd other objects exist:\n\n-   *matrices* or more generally arrays are multi-dimensional generalizations of vectors. In fact, they are vectors that can be indexed by two or more indices and will be printed in special ways. See [Arrays and matrices](https://cloud.r-project.org/doc/manuals/r-release/R-intro.html#Arrays-and-matrices).\n-   *factors* provide compact ways to handle categorical data. See [Ordered and unordered factors](https://cloud.r-project.org/doc/manuals/r-release/R-intro.html#Factors).\n-   *lists* are a general form of vector in which the various elements need not be of the same type, and are often themselves vectors or lists. Lists provide a convenient way to return the results of a statistical computation. See [Lists](https://cloud.r-project.org/doc/manuals/r-release/R-intro.html#Lists).\n-   *data frames* are matrix-like structures, in which the columns can be of different types. Think of data frames as 'data matrices' with one row per observational unit but with (possibly) both numerical and categorical variables. Many experiments are best described by data frames: the treatments are categorical but the response is numeric. See [Data frames](https://cloud.r-project.org/doc/manuals/r-release/R-intro.html#Data-frames).\n-   *functions* are themselves objects in R which can be stored in the project's workspace. This provides a simple and convenient way to extend R. See [Writing your own functions](https://cloud.r-project.org/doc/manuals/r-release/R-intro.html#Writing-your-own-functions).\n\n### Use R for Formulas\n\nFor example, say we had a data set of observations of heights and weights, and for some reason we wanted to calculate the BMI for each observation. To get the mean for each observation I could do the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # load the tidyverse package to use the pipe %>%\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.2 --\nv ggplot2 3.3.6      v purrr   0.3.4 \nv tibble  3.1.7      v dplyr   1.0.10\nv tidyr   1.2.0      v stringr 1.4.1 \nv readr   2.1.2      v forcats 0.5.2 \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(datasets) # load the women dataset\n\nwomen %>% # call the data set\n  mutate( # create new variables for the data set I just called\n    bmi = (weight / (height)^2)*703 # new variable BMI using the formula for calculating BMI from weight in pounds and height in inches\n  ) %>%\n  head() # limit my output to the first six observations\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  height weight      bmi\n1     58    115 24.03240\n2     59    117 23.62856\n3     60    120 23.43333\n4     61    123 23.23811\n5     62    126 23.04318\n6     63    129 22.84883\n```\n:::\n:::\n\n\n\nAnd if I wanted to get the mean or median of my sample's BMI, then I could do this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwomen %>% # call the dataset\n  mutate( # create new variables\n    bmi = (weight / (height)^2)*703 # new variable BMI using the formula for calculating BMI from weight in pounds and height in inches\n  ) %>%\n  summarise( # creates a new data frame\n    # It will contain one column for each grouping variable and one column for each of the summary statistics that you have specified\n    bmi_mean = mean(bmi), # new variable\n    bmi_median = median(bmi) # new variable\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  bmi_mean bmi_median\n1 22.72443   22.46272\n```\n:::\n:::\n\n\n\n## Packages\n\nPackages are bundles of code that add new functionality. This is a list of the packages I recommend:\n\n-   [here](https://here.r-lib.org/): project oriented workflow\n-   [tidyverse](https://www.tidyverse.org/): an opinionated collection of R packages designed for data science\n-   [janitor](https://sfirke.github.io/janitor/): simple functions for examining and cleaning dirty data\n-   [haven](https://haven.tidyverse.org/): enables R to read and write various data formats used by other statistical packages (i.e. SAS)\n-   [readxl](https://readxl.tidyverse.org/): makes it easy to get data out of Excel and into R\n-   [lubridate](https://lubridate.tidyverse.org/): makes it easier to do the things R does with date-times and possible to do the things R does not\n-   [rmarkdown](https://rmarkdown.rstudio.com/lesson-1.html): Turn your analyses into high quality documents, reports, presentations and dashboards\n-   [knitr](https://yihui.org/knitr/): designed to be a transparent engine for dynamic report generation with R\n-   [gt](https://gt.rstudio.com/): make wonderful-looking tables using the R programming language\n-   [pacman](https://github.com/trinker/pacman): your new package manager\n-   [qualtRics](https://docs.ropensci.org/qualtRics/): implements the retrieval of survey data using the Qualtrics API and aims to reduce the pre-processing steps needed in analyzing such surveys\n-   [tidycensus](https://walker-data.com/tidycensus/): allows users to interface with a select number of the US Census Bureau's data APIs and return tidyverse-ready data frames, optionally with simple feature geometry included\n-   [flexdashboard](https://pkgs.rstudio.com/flexdashboard/): make it easy to create interactive dashboards for R, using R Markdown\n-   [pins](https://pins.rstudio.com/): publishes data, models, and other R objects, making it easy to share them across projects and with your colleagues\n-   [Rnssp](https://cdcgov.github.io/Rnssp/): catalog of data processing and analytics tools, templates, and functions commonly used across the National Syndromic Surveillance Program at the Centers for Disease Control and Prevention (CDC)\n\n### Installing Packages\n\nInstall packages individually with `install.packages(\"package-name\")` or use `pacman::p_load(package-name)`.\n\nThis is [R code](https://gist.github.com/stevenworthington/3178163) that you can use to install the packages I listed above:\n\n    ipak <- function(pkg){\n        new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n        if (length(new.pkg)) \n            install.packages(new.pkg, dependencies = TRUE)\n        sapply(pkg, require, character.only = TRUE)\n    }\n\n    # usage\n    packages <- c(\n      \"here\",\n      \"tidyverse\",\n      \"janitor\",\n      \"haven\",\n      \"readxl\",\n      \"lubridate\",\n      \"rmarkdown\",\n      \"knitr\",\n      \"gt\",\n      \"pacman\",\n      \"qualtRics\",\n      \"tidycensus\",\n      \"flexdashboard\",\n      \"pins\",\n      \"Rnssp\"\n    )\n\n    ipak(packages)\n\n### Loading Packages\n\nLoad packages for use with `library(package-name)` or `pacman::p_load(package-name)`.\n\n## R Programming Tutorial - Learn the Basics of Statistical Computing\n\nThis is the Free Code Camp R Programming Tutorial (2019: <https://www.youtube.com/watch?v=_V8eKsto3Ug>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_V8eKsto3Ug\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n\n</iframe>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}