{
  "hash": "80cdb69667488b9baf5e71d62a367efd",
  "result": {
    "markdown": "# Prerequisites\n\n## Learning Objectives\n\nIn this chapter, readers will:\n\n-   identify how to install R and RStudio\n\n## Introduction\n\nBefore we get started, please make sure that you have met the following required prerequisites.\n\n## Required\n\nTo use R for epidemiology data analysis you must have R installed on your computer or have access to an R server. And I recommend you use RStudio to work with R.\n\n### R\n\nInstall R from the website: <https://cloud.r-project.org/>\n\nIn this guide, I am using R version:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR.version.string\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R version 4.2.1 (2022-06-23)\"\n```\n:::\n:::\n\n\n### RStudio\n\nRStudio is an interactive development environment (IDE) and is the recommended way to use R. Install RStudio Desktop from the website: <https://www.rstudio.com/products/rstudio/download/#download>\n\nIn this guide, I am using RStudio version:\n\n    RStudio 2022.07.1+554 \"Spotted Wakerobin\" Release (7872775ebddc40635780ca1ed238934c3345c5de, 2022-07-22) for Ubuntu Bionic  \n    Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36  \n\n### Update R Packages\n\nUse the command below in your **Console** to update currently installed R packages:\n\n    update.packages(ask = FALSE, checkBuilt = TRUE)\n\nThe console is a pane on your RStudio window. The default pane layout may differ from mine, but this is my preferred layout:\n\n![Rstudio Global Options Pane Layout accessible by Tools](assets/rstudio-pane-layout.png)\n\n## Recommended\n\nI have two recommendations. Incorporate a project oriented workflow and use version control.\n\n### Project Oriented Workflow\n\nA project oriented workflow is a data analysis procedure that exists within a container. Jennifer Bryan (citation needed) makes a strong case for incorporating a project oriented workflow into your data analysis system:\n\n> I suggest organizing each data analysis into a project: a folder on your computer that holds all the files relevant to that particular piece of work. I'm not assuming this is an RStudio Project, though this is a nice implementation discussed below.\n>\n> Any resident R script is written assuming that it will be run from a fresh R process with working directory set to the project directory. It creates everything it needs, in its own workspace or folder, and it touches nothing it did not create. For example, it does not install additional packages (another pet peeve of mine).\n>\n> This convention guarantees that the project can be moved around on your computer or onto other computers and will still \"just work\". I argue that this is the only practical convention that creates reliable, polite behavior across different computers or users and over time. This convention is neither new, nor unique to R.\n>\n> It's like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety.\n\nAn easy way to do this in RStudio is to create a new project for each data analysis and use the [**here** package](https://here.r-lib.org/). In my case, I have a folder `~/projects/` where all my data analysis projects live. If I have a data analysis project to summarize This makes it easy for me to find the data, R scripts, or reports that I need.\n\n### Version Control\n\nVersion control allows for tracking changes to your project and makes it easier for collaborating on projects. As described by Jennifer Bryan (citation needed) in the *Happy Git and GitHub for the useR* guide:\n\n> Git is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files -- called a repository -- in a sane, highly structured way. If you have no idea what I'm talking about, think of it as the \"Track Changes\" features from Microsoft Word on steroids.\n>\n> Git has been re-purposed by the data science community. In addition to using it for source code, we use it to manage the motley collection of files that make up typical data analytical projects, which often consist of data, figures, reports, and, yes, source code.\n\nLearning version about version control is beyond the scope of this guide, but I recommend that you review the resource, [Happy Git and GitHub for the useR](https://happygitwithr.com/index.html) by Jennifer Bryan.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}