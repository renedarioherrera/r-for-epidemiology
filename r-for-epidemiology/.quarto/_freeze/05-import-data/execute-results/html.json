{
  "hash": "edb261ad8ba0fa29d9c26e8d8df670c1",
  "result": {
    "markdown": "# Import Data\n\n## Learning Objectives\n\nIn this chapter, readers will:\n\n-   identify how to import data from csv, xlsx, and sas7bdat files\n-   identify how `janitor::clean_names()` can make messy data, more neat\n\n## Introduction\n\nCommon file types to import may be one of:\n\n-   csv: comma separated value, a text file\n-   xlsx: a Microsoft Excel workbook or worksheet\n-   sas7bdat: SAS files\n\n## CSV\n\nThe `readr` package, loaded automatically with `library(tidyverse)`, is the package used to read and import csv files. Once loaded, the command to import a csv file is `read_csv(\"name-of-csv-file.csv\")`. If we were interested in [United States COVID-19 Community Levels by County](https://data.cdc.gov/Public-Health-Surveillance/United-States-COVID-19-Community-Levels-by-County/3nnm-4jni/data), and we had downloaded data in a csv file, we could import it by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # load readr package from within tidyverse\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.7      ✔ dplyr   1.0.10\n✔ tidyr   1.2.0      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(janitor) # load janitor package\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n\n```{.r .cell-code}\nmy_csv_data <- read_csv( # assign the csv file to a new object\n  file = \"data-raw/us-covid-19-community-level-by-county.csv\" # this is the file to read\n) %>%\n  clean_names() # clean up the variable names\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1000 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): county, county_fips, state, health_service_area, covid_19_communit...\ndbl  (6): county_population, health_service_area_number, health_service_area...\ndttm (1): date_updated\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nglimpse(my_csv_data) # get a glimpse of the data \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 12\n$ county                             <chr> \"Wilcox County\", \"Caldwell County\",…\n$ county_fips                        <chr> \"13315\", \"29025\", \"27111\", \"40021\",…\n$ state                              <chr> \"Georgia\", \"Missouri\", \"Minnesota\",…\n$ county_population                  <dbl> 8635, 9020, 58746, 48657, 19169, 39…\n$ health_service_area_number         <dbl> 197, 548, 582, 445, 316, 904, 435, …\n$ health_service_area                <chr> \"Sumter, GA - Crisp, GA\", \"Jackson …\n$ health_service_area_population     <dbl> 86868, 1310630, 64718, 239733, 1626…\n$ covid_inpatient_bed_utilization    <dbl> 0.2, 3.2, 6.3, 3.0, 5.8, 3.6, 1.1, …\n$ covid_hospital_admissions_per_100k <dbl> 2.3, 10.8, 12.4, 1.7, 18.4, 8.4, 8.…\n$ covid_cases_per_100k               <dbl> 11.58, 277.16, 156.61, 2.06, 459.07…\n$ covid_19_community_level           <chr> \"Low\", \"High\", \"Medium\", \"Low\", \"Hi…\n$ date_updated                       <dttm> 2022-05-19 07:00:00, 2022-06-23 07…\n```\n:::\n:::\n\n\n## Excel\n\nThe `readxl` package, loaded with `library(readxl)`, is the package used to read and import xls and xlsx files. Once loaded, the command to import an Excel worksheet is `read_excel(\"name-of-excel-file.xlsx\")`. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # load tidyverse package\nlibrary(readxl) # load readxl package\nlibrary(janitor) # load janitor package\n\nmy_excel_data <- read_excel( # assign the excel file to a new object\n  \"data-raw/us-covid-19-community-level-by-county.xlsx\" # name of excel file\n) %>%\n  clean_names() # clean up the variable names\n\nglimpse(my_excel_data) # get a glimpse of the data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 12\n$ county                             <chr> \"Wibaux County\", \"Blue Earth County…\n$ county_fips                        <chr> \"30109\", \"27013\", \"48109\", \"37005\",…\n$ state                              <chr> \"Montana\", \"Minnesota\", \"Texas\", \"N…\n$ county_population                  <chr> \"969\", \"67653\", \"2171\", \"11137\", \"5…\n$ health_service_area_number         <chr> \"767\", \"573\", \"415\", \"73\", \"152\", \"…\n$ health_service_area                <chr> \"Richland, MT - Dawson, MT\", \"Blue …\n$ health_service_area_population     <chr> \"22049\", \"131436\", \"846464\", \"62825…\n$ covid_inpatient_bed_utilization    <chr> \"1.8\", \"2.8\", \"2.2\", \"3.5\", \"1.5\", …\n$ covid_hospital_admissions_per_100k <chr> \"9.1\", \"10.7\", \"5.6\", \"12.7\", \"0.5\"…\n$ covid_cases_per_100k               <chr> \"0\", \"181.81\", \"46.06\", \"26.94\", \"1…\n$ covid_19_community_level           <chr> \"Low\", \"Medium\", \"Low\", \"Medium\", \"…\n$ date_updated                       <dttm> 2022-06-23 07:00:00, 2022-06-09 07…\n```\n:::\n:::\n\n\n## SAS\n\nThe `haven` package, loaded with `library(haven)`, is the package used to read and import SAS files. Once loaded, the command to import a SAS data set is `read_sas(\"name-of-sas-file.sas7bdat\")`. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # load tidyverse package\nlibrary(haven) # load haven package\nlibrary(janitor) # load janitor package\n\nmy_sas_data <- read_sas( # assign the sas file to a new object\n  \"data-raw/us-covid-19-community-level-by-county.sas7bdat\" # name of sas file\n) %>%\n  clean_names() # clean up the variable names\n\nglimpse(my_sas_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 12\n$ county                          <chr> \"McCulloch County\", \"McIntosh County\",…\n$ county_fips                     <chr> \"48307\", \"40091\", \"54003\", \"29143\", \"0…\n$ state                           <chr> \"Texas\", \"Oklahoma\", \"West Virginia\", …\n$ county_population               <chr> \"7984\", \"19596\", \"119171\", \"17076\", \"1…\n$ health_service_area_number      <chr> \"426\", \"445\", \"25\", \"563\", \"407\", \"904…\n$ health_service_area             <chr> \"Tom Green (San Angelo), TX - Runnels,…\n$ health_service_area_population  <chr> \"162408\", \"239733\", \"433166\", \"310071\"…\n$ covid_inpatient_bed_utilization <chr> \"1.1\", \"2.9\", \"2.2\", \"0.5\", \"1\", \"3.9\"…\n$ covid_hospital_adm_per_100k     <chr> \"12.9\", \"5.8\", \"3.5\", \"1.6\", \"5.1\", \"8…\n$ covid_cases_per_100k            <chr> \"137.78\", \"56.13\", \"23.5\", \"11.71\", \"2…\n$ covid_19_community_level        <chr> \"Medium\", \"Low\", \"Low\", \"Low\", \"Low\", …\n$ date_updated                    <dttm> 2022-06-23, 2022-06-23, 2022-04-14, 2…\n```\n:::\n:::\n\n\n## About the Data\n\nI used the following code to download the data:\n\n    library(tidyverse)\n    library(RSocrata)\n    library(janitor)\n\n    covid19 <- read.socrata(url = \"https://data.cdc.gov/resource/3nnm-4jni.json\") %>%\n      as_tibble() %>%\n      clean_names()\n\nAnd I saved a sample of the data to each of the three file types we discussed earlier in this section.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}